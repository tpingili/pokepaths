{"version":3,"sources":["components/Tile.js","components/Board.js","components/ConfigOptions.js","App.js","index.js"],"names":["Tile","x","y","value","tileClick","tileBkgrnd","className","onClick","Board","sideLength","tileType","useState","Array","Number","fill","map","board","setBoard","pathObj","setPathObj","pathArray","setPathArray","dataFetching","setDataFetching","handleTileClick","type","copy","lodash","forEach","item","clearTile","tilesList","boardCopy","tile","fetchPathData","isEmpty","axios","post","then","response","moves","pop","pathArrayCopy","currentX","startingLoc","currentY","moveChar","push","transformMovesToTiles","data","catch","err","alert","message","useEffect","row","rowIndex","colIndex","impassablesCopy","startCopy","endCopy","arrItem","size","disabled","ConfigOptions","tileTypeChange","style","textDecoration","onChange","event","target","name","id","htmlFor","App","setSideLength","gameStarted","setGameStarted","currentTileType","setCurrentTileType","newValue","min","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c5fb2be.chunk.js","sourcesContent":["import React from 'react';\n\nconst Tile = ({x, y, value, tileClick}) => {\n    const tileBkgrnd = value ? `${value}-tile` : 'null-tile'; \n\n    //call the function in Board.js to set the tile to either \n    //a rock, start or finish tile based on the radio button selection\n    const clickOnTile = () => {\n        tileClick(x, y)\n    }\n\n    return (\n        <td className={`tile-btn ${tileBkgrnd}`} onClick={clickOnTile} ></td>\n    )\n};\n\nexport default Tile;","import React, { useEffect, useState } from 'react';\nimport '../App.css';\nimport Tile from './Tile';\nimport lodash from 'lodash';\nimport axios from 'axios';\n\nconst Board = ({sideLength, tileType }) => {\n\n    const [ board, setBoard ] = \n            useState(new Array(Number(sideLength))\n                        .fill(null)\n                        .map(() => new Array(Number(sideLength)).fill('null'))\n            );\n    const [ pathObj, setPathObj ] = useState({});\n    const [ pathArray, setPathArray ] = useState([]);\n    const [ dataFetching, setDataFetching ] = useState(false);\n\n    //set the tile background \n    const handleTileClick = (x, y, type) => {\n        const copy = [...board];\n        //when the user is configuring start, finish or impassables, type is not passed\n        if(!type) {\n            //clear the previous path configured\n            lodash.forEach(pathArray, item  => {\n                //use the y as row index and x as col index\n                copy[item.y][item.x] = 'null';\n            });\n        }\n        //use y as row index and x as col index\n        copy[y][x] = type ? type: tileType;\n        setBoard(copy);\n    }\n\n    //clear the board, previous path configured, path object used in the post request\n    const clearBoard = () => {\n        setBoard(new Array(Number(sideLength))\n                .fill(null)\n                .map(() => new Array(Number(sideLength)).fill('null')));\n        setPathArray([]);\n        setPathObj({});\n    }\n\n    //clear the backgrounds (reset the tiles)\n    //used to clear start and finish tiles when user selects more than 1\n    const clearTile = (tilesList) => {\n        const boardCopy = [...board];\n        lodash.forEach(tilesList, (tile) => {\n            //use the y as row index and x as col index\n            boardCopy[tile.y][tile.x] = 'null';\n        });\n        setBoard(boardCopy);\n    }\n\n    const validateBoard = () => {\n        const impassablesCopy = [];\n        const startCopy = [];\n        const endCopy = [];\n        //create the object to be passed in for the post request\n        lodash.forEach(board, (arrItem, rowIndex) => {\n            lodash.forEach(arrItem, (item, colIndex) => {\n                ////use the y as row index and x as col index\n                if(item === 'rock') {\n                    impassablesCopy.push({ x: colIndex, y: rowIndex });\n                }\n                if(item === 'start') {\n                    startCopy.push({ x: colIndex, y: rowIndex})\n                }\n                if(item === 'finish') {\n                    endCopy.push({ x: colIndex, y: rowIndex })\n                }\n            });\n        });\n        //if the user selected more than one start tile or finish tile\n        if(lodash.size(startCopy)!==1 || lodash.size(endCopy)!==1) {\n            //alert the user, clear the start and finish tiles\n            //clear the path object\n            alert('Please choose one start and one finish tile');\n            if(lodash.size(startCopy)!==1) {\n                clearTile(startCopy);\n            }\n            if(lodash.size(endCopy)!==1) {\n                clearTile(endCopy);\n            }\n            setPathObj({});\n            return;\n        } \n\n        //configure the path object properties\n        setPathObj({...pathObj, 'sideLength': Number(sideLength), \n                'startingLoc': startCopy[0], 'endingLoc': endCopy[0], \n                'impassables': impassablesCopy });\n    }\n\n    const transformMovesToTiles = (moves) => {\n        //exclude the last tile (finish tile) from turning into 'grass'\n        moves.pop();\n        const pathArrayCopy = [];\n        //create a list of tiles which we want to configure as path\n        //by turning them into grass tiles\n        let currentX = pathObj.startingLoc.x;\n        let currentY = pathObj.startingLoc.y;\n        lodash.forEach(moves, (moveChar) => {\n            if(moveChar === 'L') {\n                currentX -= 1;\n            }\n            if(moveChar === 'R') {\n                currentX += 1;\n            }\n            if(moveChar === 'U') {\n                currentY -= 1;\n            }\n            if(moveChar === 'D') {\n                currentY += 1;\n            }\n            pathArrayCopy.push({ x: currentX, y: currentY });\n        });\n        setPathArray(pathArrayCopy);\n    }\n\n    const fetchPathData = () => {\n        if(!lodash.isEmpty(pathObj)) {\n            //disable buttons until the request returns\n            setDataFetching(true);\n            axios.post('https://frozen-reef-96768.herokuapp.com/find-path', pathObj)\n            .then(response => {\n                transformMovesToTiles(response.data.moves);\n                //enable buttons\n                setDataFetching(false);\n            })\n            .catch(err => {\n                //if no path was found, alert the message to the user\n                if(err.response) {\n                    alert(err.response.data.message);\n                }\n                setDataFetching(false);\n            });\n        }\n    }\n\n    useEffect(() => {\n        //whenever pathArray changes and is not empty,\n        //turn each of the tiles in the list to grass\n        if(!lodash.isEmpty(pathArray)) {\n            lodash.forEach(pathArray, item  => {\n                handleTileClick(item.x, item.y, 'grass');\n            });\n        }\n        // eslint-disable-next-line\n    }, [pathArray]);\n\n    useEffect(() => {\n        //whenever path object changes to be non-empty\n        //make a post request to fetch data\n        fetchPathData(); // eslint-disable-next-line\n    }, [pathObj])\n\n    return (\n        <div>\n            <table className=\"board\">\n                <tbody className=\"table-body\">\n                    { board.map((row, rowIndex) => \n                        <tr key={rowIndex}>\n                        {row.map((item, colIndex) => \n                            <Tile key={(rowIndex * 100) + colIndex} x={colIndex} y={rowIndex} \n                            value={item} tileClick={handleTileClick} />\n                        )}   \n                    </tr>\n                    )}\n                </tbody>\n            </table>\n            <button className=\"board-btn\" onClick={validateBoard} disabled={dataFetching}>Find Path</button> \n            <button className=\"board-btn\" onClick={clearBoard} disabled={dataFetching}>Clear Board</button>                \n        </div>\n    )\n}\n\nexport default Board;\n","import React from 'react';\n\nconst ConfigOptions = ({tileTypeChange}) => {\n\n    //set the current tile type to the radio button selection's value\n    //by calling the function in App.js\n    const handleRadioButtonChange = (event) => {\n        tileTypeChange(event.target.value);\n    }\n\n    return (\n        <div>\n            <div style={{textDecoration: 'underline'}}>Configure squares</div>\n            <div className=\"config-group\" onChange={handleRadioButtonChange}>\n                <div>\n                    <input type=\"radio\" value=\"rock\" name=\"configOpt\" id=\"rock\" /> \n                    <label htmlFor=\"rock\">Impassables (optional)</label>\n                </div>\n                <div>\n                    <input type=\"radio\" value=\"start\" name=\"configOpt\" id=\"start\" /> \n                    <label htmlFor=\"start\">Start (choose only 1) </label>\n                </div>\n                <div>\n                    <input type=\"radio\" value=\"finish\" name=\"configOpt\" id=\"finish\" /> \n                    <label htmlFor=\"finish\"> Finish (choose only 1) </label>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ConfigOptions;","import React, { useState } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport ConfigOptions from './components/ConfigOptions';\n\nconst App = () => {\n\n  const [ sideLength, setSideLength ] = useState('');\n  const [ gameStarted, setGameStarted ] = useState(false);\n  const [ currentTileType, setCurrentTileType ] = useState('')\n\n  const createBoard = () => {\n    if(Number(sideLength) < 2) {\n      alert('Please select a valid whole number greater than or equal to 2');\n      setSideLength('');\n    } else {\n      setGameStarted(true);\n    }\n  }\n\n  const handleTileTypeChange = (newValue) => {\n    //sets the current tile type which sets the tile background\n    setCurrentTileType(newValue);\n  }\n\n  if(!gameStarted) {\n    return (\n      <div className=\"App\">\n          <div className=\"App-container\">\n              <p>Enter board size: </p>\n              <input className=\"board-input\" type=\"number\" min=\"2\" value={sideLength} \n                onChange={(event) => setSideLength(event.target.value)} /> \n            <button className=\"board-btn\" onClick={createBoard}>Create Board</button>\n          </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-container\">\n        <Board sideLength={sideLength} tileType={currentTileType} />\n        <ConfigOptions tileTypeChange={handleTileTypeChange}/>\n      </div>\n    </div>\n  )\n  \n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}